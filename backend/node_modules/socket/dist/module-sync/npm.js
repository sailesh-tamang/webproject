'use strict';

function _socketInterop(e) {
  let c = 0
  for (const k in e ?? {}) {
    c = c === 0 && k === 'default' ? 1 : 0
    if (!c && k !== '__esModule') break
  }
  return c ? e.default : e
}

var process = require('node:process');
var spawn = _socketInterop(require('@npmcli/promise-spawn'));
var objects = require('@socketsecurity/registry/lib/objects');
var npmPaths = require('./npm-paths.js');
var constants = require('./constants.js');

const {
  SOCKET_IPC_HANDSHAKE,
  abortSignal
} = constants;
const auditFlags = new Set(['--audit', '--no-audit']);
const fundFlags = new Set(['--fund', '--no-fund']);

// https://docs.npmjs.com/cli/v11/using-npm/logging#aliases
const logFlags = new Set(['--loglevel', '-d', '--dd', '--ddd', '-q', '--quiet', '-s', '--silent']);
const progressFlags = new Set(['--progress', '--no-progress']);
function isAuditFlag(cmdArg) {
  return auditFlags.has(cmdArg);
}
function isFundFlag(cmdArg) {
  return fundFlags.has(cmdArg);
}
function isLoglevelFlag(cmdArg) {
  // https://docs.npmjs.com/cli/v11/using-npm/logging#setting-log-levels
  return cmdArg.startsWith('--loglevel=') || logFlags.has(cmdArg);
}
function isProgressFlag(cmdArg) {
  return progressFlags.has(cmdArg);
}
function safeNpmInstall(opts) {
  const {
    args = [],
    ipc,
    ...spawnOptions
  } = {
    __proto__: null,
    ...opts
  };
  const terminatorPos = args.indexOf('--');
  const npmArgs = (terminatorPos === -1 ? args : args.slice(0, terminatorPos)).filter(a => !isAuditFlag(a) && !isFundFlag(a) && !isProgressFlag(a));
  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos);
  const useIpc = objects.isObject(ipc);
  const useDebug = npmPaths.isDebug();
  const spawnPromise = spawn(
  // Lazily access constants.execPath.
  constants.execPath, [
  // Lazily access constants.nodeNoWarningsFlags.
  ...constants.nodeNoWarningsFlags, '--require',
  // Lazily access constants.npmInjectionPath.
  constants.npmInjectionPath, npmPaths.getNpmBinPath(), 'install',
  // Even though the '--silent' flag is passed npm will still run through
  // code paths for 'audit' and 'fund' unless '--no-audit' and '--no-fund'
  // flags are passed.
  '--no-audit', '--no-fund',
  // Add `--no-progress` and `--silent` flags to fix input being swallowed
  // by the spinner when running the command with recent versions of npm.
  '--no-progress',
  // Add the '--silent' flag if a loglevel flag is not provided and the
  // SOCKET_CLI_DEBUG environment variable is not truthy.
  ...(useDebug || npmArgs.some(isLoglevelFlag) ? [] : ['--silent']), ...npmArgs, ...otherArgs], {
    signal: abortSignal,
    // Set stdio to include 'ipc'.
    // See https://github.com/nodejs/node/blob/v23.6.0/lib/child_process.js#L161-L166
    // and https://github.com/nodejs/node/blob/v23.6.0/lib/internal/child_process.js#L238.
    stdio: useDebug ?
    // 'inherit'
    useIpc ? [0, 1, 2, 'ipc'] : 'inherit' :
    // 'ignore'
    useIpc ? ['ignore', 'ignore', 'ignore', 'ipc'] : 'ignore',
    ...spawnOptions,
    env: {
      ...process.env,
      ...spawnOptions.env
    }
  });
  if (useIpc) {
    spawnPromise.process.send({
      [SOCKET_IPC_HANDSHAKE]: ipc
    });
  }
  return spawnPromise;
}

exports.isLoglevelFlag = isLoglevelFlag;
exports.isProgressFlag = isProgressFlag;
exports.safeNpmInstall = safeNpmInstall;
//# debugId=73c2e7c8-ac5f-4a8a-8343-be29aaec8a8a
//# sourceMappingURL=npm.js.map
